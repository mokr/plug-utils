(ns plug-utils.yaml
  (:require [clj-yaml.core :as yaml]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [taoensso.timbre :as log])
  (:import (flatland.ordered.map OrderedMap)))              ;; Lib is a dependency of clj-yaml.



;|-------------------------------------------------
;| YAML BASED CONFIG FILES

(defn- underscore->hyphen
  "Transform underscore to hyphen to be more idiomatic with regard to clj(s) naming"
  [k]
  (if (keyword? k)
    (-> k name (str/replace "_" "-") keyword)
    k))


(defn- to-regular-map
  "Transform a map of nested OrdredMaps to a regular hash-maps."
  [x]
  (if (instance? OrderedMap x)
    (reduce-kv (fn [acc k v]
                 (assoc acc (underscore->hyphen k) (to-regular-map v)))
               {}
               x)
    x))


(defn config-from-yml-file
  "Include config from YAML file.

   Use-case: Typically, to include a yml-file generated by Ansible.
    - DEV: File is a symlink to some secure location.
    - PROD: File is placed next to jar.

   Optional arg: :sub-key <some-key>
    - Return content of this key as config instead of the entire map.

   Transformations performed:
    - Data is converted to EDN
    - Keys in map will have underscores (_) replaced with hyphens (-).
      Example: \"my_key:\" (yaml) -> \":my-key\" (edn)

   Returns:
   EDN map or nil"
  [file & {:keys [sub-key]}]
  (assert (.exists (io/file file))
          (format "FATAL! Unable to load YAML from %s (file does not exist). Did you forget to symlink?" file))

  (log/info (format "Loading config from YAML file %s" file))

  (when-let [config (some-> file slurp yaml/parse-string to-regular-map)]
    (if sub-key
      (get config sub-key)
      config)))
